{"version":3,"sources":["constants/reactSelectOptions.js","components/Button.js","components/InstrumentsForm.jsx","components/Header.js","App.js","index.js"],"names":["value","label","types","ButtonWrapper","styled","div","props","showBtn","Button","color","InstrumentsForm","useForm","mode","register","handleSubmit","errors","control","watch","setValue","useState","typeDropdown","setTypeDropdown","watchAllFields","useEffect","console","log","instrumentsArray","options","registerOptions","level","required","pattern","message","amount","person","instrument","instrumentType","Form","onSubmit","data","FormGroup","Label","name","render","onChange","onBlur","e","typesArray","i","length","obj","push","handleInstrumentChange","inputRef","isClearable","defaultValue","rules","className","Input","type","innerRef","min","step","handleTypeChange","_data","_show","Object","keys","showButton","App","Container","Card","CardHeader","Header","CardBody","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.9ac0779a.chunk.js","sourcesContent":["export default [\r\n    {value: \"future\", label: \"Futures\", types: [\"Price\", \"Yield\", \"Spread\"] },\r\n    {value: \"derivatives\", label: \"Derivatives\", types: [\"Price\", \"Yield\"] },\r\n    {value: \"bonds\", label: \"Bonds\", types: [\"Price\",\"Spread\"] },\r\n    \r\n  ];\r\n","import React from \"react\";\r\nimport { Button as ReactButton } from \"reactstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ButtonWrapper = styled.div(\r\n  (props) => `\r\n    ${\r\n      !props.showBtn &&\r\n      `\r\n      pointer-events: none;\r\n      opacity: 0.5;\r\n    `\r\n    }\r\n  `\r\n);\r\n\r\nconst Button = ({ showBtn }) => {\r\n  return (\r\n    <>\r\n      <ButtonWrapper showBtn={showBtn}>\r\n        <ReactButton color=\"primary\">Submit</ReactButton>\r\n      </ButtonWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { Form, FormGroup, Label, Input } from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport options from \".././constants/reactSelectOptions\";\r\nimport Button from \"./Button\";\r\n\r\nconst InstrumentsForm = () => {\r\n  const { register, handleSubmit, errors, control, watch, setValue } = useForm({\r\n    mode: \"onBlur\"\r\n  });\r\n  const [typeDropdown, setTypeDropdown] = useState([]);\r\n  const watchAllFields = watch();\r\n  useEffect(() => {\r\n    watch(() => {\r\n          console.log(\"Field changed!\", watch);\r\n    });\r\n  });\r\n\r\n  const instrumentsArray = options;\r\n\r\n  /** Form submission method\r\n   * show form contents to console\r\n   *\r\n   *@param {Object} data\r\n   */\r\n\r\n  const handleSubmission = (data) => console.log(\"data---\", data);\r\n  /** show errors to console\r\n   *\r\n   *\r\n   *@param N/A\r\n   */\r\n  const handleError = (errors) => {\r\n    console.log(errors);\r\n  };\r\n\r\n  /** Validation configuration\r\n   *\r\n   *\r\n   *@param N/A\r\n   */\r\n  const registerOptions = {\r\n    level: {\r\n      required: \"Level is required\",\r\n      pattern: {\r\n        value: /^([1-9]{1}[\\d]{0,2}(\\.[\\d]{3})*(,[\\d]{0,2})?|[1-9]{1}[\\d]{0,}(,[\\d]{0,2})?|0(,[\\d]{0,2})?|(,[\\d]{1,2})?)$/,\r\n        message: \"Amount must be a positive numeric value\"\r\n      }\r\n    },\r\n    amount: {\r\n      required: \"Amount is required\",\r\n      pattern: {\r\n        value: /^[1-9]\\d*$/,\r\n        message: \"Amount must be a positive numeric value\"\r\n      }\r\n    },\r\n    person: {\r\n      required: \"Person is required\"\r\n    },\r\n\r\n    instrument: { required: \"Instrument is required\" },\r\n    instrumentType: { required: \"type is required\" }\r\n  };\r\n\r\n  /** updates the Types dropdown and\r\n   * saves Instrument selection option for console\r\n   *\r\n   *@param {object} e\r\n   */\r\n  const handleInstrumentChange = (e) => {\r\n    let typesArray = [];\r\n    let data = e.types;\r\n    for (var i = 0; i < data.length; i++) {\r\n      var obj = { label: data[i], value: data[i] };\r\n      typesArray.push(obj);\r\n    }\r\n    setTypeDropdown(typesArray);\r\n    setValue(\"instrument\", e.value);\r\n  };\r\n\r\n  /**\r\n   * saves Instrument Type selection option for console\r\n   *\r\n   *@param {object} e\r\n   */\r\n  const handleTypeChange = (e) => {\r\n    if (e && e.value) {\r\n      setValue(\"instrumentType\", e.value);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * checks if to show button or not based on contents of param\r\n   *\r\n   *@param {Array} e\r\n   */\r\n  const showButton = (_data) => {\r\n    let _show = false;\r\n    if (Object.keys(_data).length > 0 &&\r\n      \r\n      _data.instrument !== \"\" &&\r\n      _data.instrumentType !== \"\" &&\r\n      _data.level !== \"\" &&\r\n      _data.person  !== \"\" && _data.amount !== \"\"\r\n    ) {\r\n      _show = true;\r\n    }\r\n\r\n    return _show;\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit(handleSubmission, handleError)}>\r\n      <FormGroup>\r\n        <Label>Instrument</Label>\r\n        <Controller\r\n          name=\"instrument\"\r\n          control={control}\r\n          render={({ onChange, value, onBlur, name }) => (\r\n            // Comment : Perhaps make generic dropDown reusable component  \r\n            <Select\r\n              onChange={(e) => {\r\n                onChange(e);\r\n                handleInstrumentChange(e);\r\n              }}\r\n              inputRef={register(registerOptions.instrument)}\r\n              options={instrumentsArray}\r\n              isClearable\r\n            />\r\n          )}\r\n          defaultValue=\"\"\r\n          rules={registerOptions.instrument}\r\n        />\r\n        <small className=\"text-danger\">\r\n          {errors.instrument && errors.instrument.message}\r\n        </small>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label>Person</Label>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"person\"\r\n          innerRef={register(registerOptions.person)}\r\n        />\r\n        <small className=\"text-danger\">\r\n          {errors.person && errors.person.message}\r\n        </small>\r\n      </FormGroup>\r\n\r\n      <FormGroup>\r\n        <Label>Level</Label>\r\n        <Input\r\n          type=\"number\"\r\n          name=\"level\"\r\n          min=\"0\"\r\n          step=\"1\"\r\n          innerRef={register(registerOptions.level)}\r\n        />\r\n        <small className=\"text-danger\">\r\n          {errors.level && errors.level.message}\r\n        </small>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label>Type</Label>\r\n\r\n        <Controller\r\n          name=\"instrumentType\"\r\n          control={control}\r\n          render={({ onChange, value, onBlur, name }) => (\r\n            <Select\r\n              inputRef={register(registerOptions.instrumentType)}\r\n              options={typeDropdown}\r\n              isClearable\r\n              onChange={(e) => {\r\n                onChange(e);\r\n                handleTypeChange(e);\r\n              }}\r\n            />\r\n          )}\r\n          defaultValue={\"\"}\r\n          rules={registerOptions.instrumentType}\r\n        />\r\n        <small className=\"text-danger\">\r\n          {errors.instrumentType && errors.instrumentType.message}\r\n        </small>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label>Amount</Label>\r\n        <Input\r\n          type=\"number\"\r\n          name=\"amount\"\r\n          min=\"0\"\r\n          step=\"1\"\r\n          innerRef={register(registerOptions.amount)}\r\n        />\r\n        <small className=\"text-danger\">\r\n          {errors.amount && errors.amount.message}\r\n        </small>\r\n      </FormGroup>\r\n    \r\n      <Button showBtn={showButton(watchAllFields)} />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default InstrumentsForm;\r\n","\r\nimport React from \"react\";\r\n\r\nexport default () => (\r\n  <>\r\n   \r\n    <h1>Instrument Form</h1>\r\n   \r\n  </>\r\n);","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Card, CardBody, CardHeader, CardTitle, Container } from \"reactstrap\";\nimport InstrumentsForm from \"./components/InstrumentsForm\";\nimport Header from \"./components/Header\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Card>\n          <CardHeader>\n            <Header />\n          </CardHeader>\n          <CardBody>\n            <InstrumentsForm />\n          </CardBody>\n        </Card>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}